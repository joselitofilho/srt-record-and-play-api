import { Action } from 'src/entities/action.entity';
import { MatchPattern } from '../constants';

export function toSelenium(timelineData): string[] {
  const code = [];

  const seleniumByMethod = {
    [MatchPattern.CSS]: 'cssSelector',
    [MatchPattern.ID]: 'id',
    [MatchPattern.XPATH]: 'xpath',
  };

  timelineData.forEach((item) => {
    switch (item.category) {
      case 'open_url':
        code.push(`driver.get("${item.data.url}");`);
        break;
      case 'click':
        code.push(
          `driver.findElement(By.${seleniumByMethod[item.data.by]}("${
            item.data.element
          }")).click();`,
        );
        break;
      case 'type':
        code.push(
          `driver.findElement(By.${seleniumByMethod[item.data.by]}("${
            item.data.element
          }")).sendKeys("${item.data.text}");`,
        );
        break;
      default:
        code.push(`// TODO: create an instruction for '${item.category}'`);
        break;
    }
  });

  return code;
}

const code = [];
export function toTagUI(timelineData): string[] {
  timelineData.forEach((item) => {
    switch (item.category) {
      case 'open_url':
        code.push(`${item.data.url}`);
        break;
      case 'click':
        code.push(`click ${item.data.element}`);
        break;
      case 'type':
        code.push(`type ${item.data.element} as ${item.data.text}`);
        break;
      default:
        code.push(`// TODO: create an instruction for '${item.category}'`);
        break;
    }
  });

  return code;
}

export function toAutoHealingJavaFile(
  timelineData: Action[],
  className: string,
  methodName: string,
): string[] {
  const javaFile = [
    '// Generated by SRT plugin',
    'package com.atlantico.srt.tests;',
    'import org.junit.Test;',
    'import org.junit.Before;',
    'import org.junit.After;',
    'import static org.junit.Assert.*;',
    'import static org.hamcrest.CoreMatchers.is;',
    'import static org.hamcrest.core.IsNot.not;',
    'import org.openqa.selenium.By;',
    'import org.openqa.selenium.WebDriver;',
    'import org.openqa.selenium.firefox.FirefoxDriver;',
    'import org.openqa.selenium.chrome.ChromeDriver;',
    'import org.openqa.selenium.remote.RemoteWebDriver;',
    'import org.openqa.selenium.remote.DesiredCapabilities;',
    'import org.openqa.selenium.Dimension;',
    'import org.openqa.selenium.WebElement;',
    'import org.openqa.selenium.interactions.Actions;',
    'import org.openqa.selenium.support.ui.ExpectedConditions;',
    'import org.openqa.selenium.support.ui.WebDriverWait;',
    'import org.openqa.selenium.JavascriptExecutor;',
    'import org.openqa.selenium.Alert;',
    'import org.openqa.selenium.Keys;',
    'import java.util.*;',
    'import java.net.MalformedURLException;',
    'import java.net.URL;',
    '',
    'import org.junit.Assert;',
    '',
    'import org.springframework.boot.test.context.SpringBootTest;',
    'import org.springframework.test.context.junit4.SpringRunner;',
    'import org.junit.runner.RunWith;',
    '',
    'import com.atlantico.srt.baseSetup.BaseTestSetup;',
    '',
    '@RunWith(SpringRunner.class)',
    '@SpringBootTest(classes=BaseTestSetup.class)',
    `public class ${className} extends BaseTestSetup {`,
    '  ',
    '  @Test',
    `  public void ${methodName}() {`,
  ];
  javaFile.push(...toSelenium(timelineData).map((row) => `    ${row}`));
  javaFile.push('  }', '}');

  return javaFile;
}
